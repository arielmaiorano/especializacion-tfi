package est.tfi;

import java.awt.*;
import java.awt.image.*;
import java.awt.event.*;
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.event.*;
import javax.swing.GroupLayout.Alignment;
import javax.swing.LayoutStyle.ComponentPlacement;

public class Dibujar extends JFrame {

    private BufferedImage canvas;

/** Creates new form JavaPaintUI */
public Dibujar() {
    initComponents();
}

    //this was moved from the overriden paintComponent()
    // instead it update the canvas BufferedImage and calls repaint()
    public void updateCanvas() {
        Graphics2D g2 = canvas.createGraphics();
        g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);

        g2.setPaint( getColor() );

        if (tool == 1) {

            g2.fillOval(currentX - ((int) value / 2), currentY - ((int) value / 2), (int) value, (int) value);
        } else if (tool == 2) {
            g2.setStroke(new BasicStroke((float) value, BasicStroke.CAP_ROUND,BasicStroke.JOIN_ROUND));
            g2.drawLine(oldX, oldY, currentX, currentY);
            g2.setStroke(new BasicStroke(1.0f));
        }
        repaint();
    }

    // used in both the updateCanvas and 'clear' method.
    private Color getColor() {
        Color c = null;
       if(color==1)
        c = Color.black;
        else if(color==2)
        c = Color.gray;
        else if(color==3)
        c = Color.white;
        else if(color==4)
        c = Color.red;
        else if(color==5)
        c = Color.green;
        else if(color==6)
        c = Color.blue;

        return c;
    }

// <editor-fold defaultstate="collapsed" desc="Generated Code">
private void initComponents() {

    canvas = new BufferedImage(600,400,BufferedImage.TYPE_INT_RGB);

    buttonGroup1 = new ButtonGroup();
    buttonGroup2 = new ButtonGroup();
    jPanel2 = new JPanel(new GridBagLayout());
    JLabel canvasLabel = new JLabel(new ImageIcon(canvas));
    jPanel2.add(canvasLabel, null);
    jButton1 = new JButton();

    setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);
    setTitle("JavaPaint ~ Nick R");

    jPanel2.setBackground(new Color(128, 40, 128));
    jPanel2.setBorder(BorderFactory.createBevelBorder(BevelBorder.RAISED));
    // add the listeners to the label that contains the canvas buffered image
    canvasLabel.addMouseListener(new MouseAdapter() {
        public void mousePressed(MouseEvent evt) {
            jPanel2MousePressed(evt);
        }
        public void mouseReleased(MouseEvent evt) {
            jPanel2MouseReleased(evt);
        }
    });
    canvasLabel.addMouseMotionListener(new MouseMotionAdapter() {
        public void mouseDragged(MouseEvent evt) {
            jPanel2MouseDragged(evt);
        }
    });

    jButton1.setText("Clear");
    jButton1.addActionListener(new ActionListener() {
        public void actionPerformed(ActionEvent evt) {
            jButton1ActionPerformed(evt);
        }
    });

    GroupLayout layout = new GroupLayout(getContentPane());
    layout.setHorizontalGroup(
    	layout.createParallelGroup(Alignment.LEADING)
    		.addGroup(layout.createSequentialGroup()
    			.addContainerGap()
    			.addGroup(layout.createParallelGroup(Alignment.LEADING)
    				.addComponent(jPanel2, Alignment.TRAILING, GroupLayout.DEFAULT_SIZE, 608, Short.MAX_VALUE)
    				.addGroup(layout.createSequentialGroup()
    					.addGap(496)
    					.addComponent(jButton1, GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)))
    			.addContainerGap())
    );
    layout.setVerticalGroup(
    	layout.createParallelGroup(Alignment.LEADING)
    		.addGroup(layout.createSequentialGroup()
    			.addGap(4)
    			.addComponent(jButton1, GroupLayout.PREFERRED_SIZE, 30, GroupLayout.PREFERRED_SIZE)
    			.addGap(51)
    			.addComponent(jPanel2, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
    			.addContainerGap())
    );
    getContentPane().setLayout(layout);

    pack();
}// </editor-fold>

// clear the canvas using the currently selected color.
private void jButton1ActionPerformed(ActionEvent evt) {
    System.out.println("You cleared the canvas.");
    Graphics g = canvas.getGraphics();    
    g.setColor( getColor() );
    g.fillRect(0,0,canvas.getWidth(),canvas.getHeight());
    repaint();
}
int currentX, currentY, oldX, oldY;

private void jPanel2MouseDragged(MouseEvent evt) {
    currentX = evt.getX();
    currentY = evt.getY();
    updateCanvas();
    if (tool == 1) {
        oldX = currentX;
        oldY = currentY;
        System.out.println("Using pen at " + currentX + ", " + currentY);
    }

}

private void jPanel2MousePressed(MouseEvent evt) {

    oldX = evt.getX();
    oldY = evt.getY();
    if (tool == 2) {
        currentX = oldX;
        currentY = oldY;
    }


}
//Tool Selection//
int tool = 1;
//Slider Properties//
double value = 5;
//COLOR CODE//
int color = 3;

//mouse released//
private void jPanel2MouseReleased(MouseEvent evt) {

    currentX = evt.getX();
    currentY = evt.getY();
    if (tool == 2) {
        System.out.println("line from " + oldX +", "+ oldY + " to " + currentX + ", " + currentY);
    }
}


// Variables declaration - do not modify
private ButtonGroup buttonGroup1;
private ButtonGroup buttonGroup2;
private JButton jButton1;
public JPanel jPanel2;
// End of variables declaration
}