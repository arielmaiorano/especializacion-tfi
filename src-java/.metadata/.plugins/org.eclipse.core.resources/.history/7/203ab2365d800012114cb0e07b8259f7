package est.tfi;

import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.math.BigDecimal;
import java.math.BigInteger;
import java.security.Security;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingWorker;
import javax.swing.border.EmptyBorder;

import org.bouncycastle.jce.provider.BouncyCastleProvider;
import java.awt.GridLayout;

public class VisualCryptoAlice extends JFrame {

	private JFrame _frame;
	private JTextField tfPuerto;
	private JButton btnIniciar;
	private JButton btnDetener;
	private JTextArea txtMensajes;
	private InnerTask task;
	private static final long serialVersionUID = 1L;
	private JLabel lblTransparencia1;
	private JPanel pnlTransparencia1;
	private JLabel lblTransparencia2;
	private JPanel pnlTransparencia2;
	private JLabel lblResultado;
	private JPanel pnlResultado;

	/**
	 * Create the frame.
	 */
	public VisualCryptoAlice() {
		// referencia local
		_frame = this;
		// se agregará hook al cerrar
		setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
		// tamaño fijo
		setBounds(300, 300, 523, 747);
		setResizable(false);
		// título
		setTitle("TFI - PCE - Visual Cryptography como Alice");

		JPanel contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);

		JLabel lblPuerto = new JLabel(
				"N\u00FAmero de conexi\u00F3n para esperar a Trent (puerto TCP)");
		lblPuerto.setBounds(10, 11, 300, 14);
		contentPane.add(lblPuerto);

		tfPuerto = new JTextField();
		tfPuerto.setText("11111");
		tfPuerto.setBounds(320, 6, 70, 23);
		contentPane.add(tfPuerto);
		tfPuerto.setColumns(10);

		JSeparator separator = new JSeparator();
		separator.setBounds(10, 61, 500, 14);
		contentPane.add(separator);

		btnIniciar = new JButton("Iniciar");
		btnIniciar.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				btnIniciar.setEnabled(false);
				btnDetener.setEnabled(true);
				task = new InnerTask();
				task.execute();
			}
		});
		btnIniciar.setBounds(422, 6, 89, 25);
		contentPane.add(btnIniciar);

		btnDetener = new JButton("Detener");
		btnDetener.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				task.cancel(true);
			}
		});
		btnDetener.setEnabled(false);
		btnDetener.setBounds(422, 31, 89, 25);
		contentPane.add(btnDetener);

		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setBounds(10, 73, 500, 120);
		contentPane.add(scrollPane);

		txtMensajes = new JTextArea();
		scrollPane.setViewportView(txtMensajes);
		txtMensajes.setEditable(false);
		txtMensajes.setFont(new Font("Monospaced", Font.PLAIN, 11));
		txtMensajes.setText("Esperando inicio...\n");

		lblTransparencia1 = new JLabel(
				"Transparencia # 1 recibida de parte de Trent");
		lblTransparencia1.setBounds(12, 200, 498, 14);
		contentPane.add(lblTransparencia1);

		pnlTransparencia1 = new JPanel();
		pnlTransparencia1.setBounds(8, 222, 502, 142);
		contentPane.add(pnlTransparencia1);
		pnlTransparencia1.setLayout(new GridLayout(1, 0, 0, 0));

		lblTransparencia2 = new JLabel(
				"Transparencia # 2 recibida de parte de Bob");
		lblTransparencia2.setBounds(12, 373, 501, 14);
		contentPane.add(lblTransparencia2);

		pnlTransparencia2 = new JPanel();
		pnlTransparencia2.setBounds(8, 393, 502, 142);
		contentPane.add(pnlTransparencia2);
		pnlTransparencia2.setLayout(new GridLayout(1, 0, 0, 0));

		lblResultado = new JLabel("Resultado al suporponer transparencias");
		lblResultado.setBounds(12, 546, 501, 14);
		contentPane.add(lblResultado);

		pnlResultado = new JPanel();
		pnlResultado.setBounds(8, 566, 502, 142);
		contentPane.add(pnlResultado);
		pnlResultado.setLayout(new GridLayout(1, 0, 0, 0));

		// hook al cerrar
		addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				// ((JFrame)e.getSource()).dispose();
				_frame.dispose();
			}
		});

	}

	private class InnerTask extends SwingWorker<Void, String> {

		String recv_2daParteNombre = null;
		String recv_2daParteDireccion = null;
		String recv_2daPartePuerto = null;
		String recv_imagen1 = null;
		String seleccion = null;

		public InnerTask() {
		}

		protected Void doInBackground() throws Exception {
			try {
				// cargar el proveedor bouncy castle (BC)
				Security.addProvider(new BouncyCastleProvider());
				if (Security.getProvider("BC") == null) {
					throw new Exception(
							"Proveedor Bouncy Castle (BC) no disponible");
				}

				// esperar conexión (y envío) de parte de Trent
				publish("Esperando conexión de Trent...");
				TcpSimple tcp = new TcpSimple();
				tcp.escuchar(Integer.parseInt(tfPuerto.getText()));
				publish("Esperando datos de parte de Trent...");

				recv_2daParteNombre = tcp.recibirString();
				recv_2daParteDireccion = tcp.recibirString();
				recv_2daPartePuerto = tcp.recibirString();
				publish("Información de la otra parte: " + recv_2daParteNombre
						+ " @ " + recv_2daParteDireccion + ":"
						+ recv_2daPartePuerto);
				recv_imagen1 = tcp.recibirString();
				publish("Imagen de transparencia recibida: " + recv_imagen1);

				// terminar, dejar de escuchar en el puerto
				tcp.desconectar();

				// preguntar por espera o incio contra parte
				seleccion = null;
				publish("+++SELECCION");
				while (seleccion == null) {
					Thread.sleep(200);
				}
				if (seleccion.equals("")) {
					throw new Exception("Se abortará protocolo.");
				}

				if (seleccion.equals("esperar")) {

					publish("Se esperará a que " + recv_2daParteNombre
							+ " comparta su transparencia...");

					TcpSimple tcp2 = new TcpSimple();
					tcp2.escuchar(Integer.parseInt(tfPuerto.getText()));
					String quienComparte = tcp.recibirString();
					String imagenComparte = tcp.recibirString();
					tcp2.desconectar();
					publish("Imagen recibida de parte de " + quienComparte
							+ ": " + imagenComparte);

					publish("Imagen reconstruida.");

				} else if (seleccion.equals("compartir_con_2da_parte")) {

					publish("Enviando transparencia a " + recv_2daParteNombre
							+ "...");
					TcpSimple tcpComparte = new TcpSimple();
					tcpComparte.conectar(recv_2daParteDireccion,
							Integer.parseInt(recv_2daPartePuerto));
					tcpComparte.enviarString("Alice");
					tcpComparte.enviarString(recv_imagen1);
					tcpComparte.desconectar();
					publish("Información enviada.");
				}

				publish("PROTOCOLO TERMINADO.");

			} catch (InterruptedException ie) {
				publish("INTERRUMPIDO: " + ie.getMessage());
			} catch (Exception e) {
				publish("ERROR: " + e.getMessage());
			}
			return null;
		}

		protected void process(List<String> strs) {
			try {
				for (String str : strs) {
					if (str != null && !str.equals("")) {
						if (!str.startsWith("+++")) {
							txtMensajes.setText(txtMensajes.getText() + str
									+ "\n");
						} else {
							// mensaje especial
							if (str.equals("+++SELECCION")) {
								Object[] opciones = {
										"Esperar a " + recv_2daParteNombre,
										"Compartir con " + recv_2daParteNombre };
								int n = JOptionPane.showOptionDialog(_frame,
										"¿Cómo reconstruir la imagen secreta?",
										"TFI - Selección",
										JOptionPane.YES_NO_CANCEL_OPTION,
										JOptionPane.QUESTION_MESSAGE, null,
										opciones, null);
								if (n != JOptionPane.CLOSED_OPTION) {
									if (n == JOptionPane.YES_OPTION) {
										seleccion = "esperar";
									} else {
										seleccion = "compartir_con_2da_parte";
									}
								} else {
									seleccion = "";
								}
							}

						}
					}
				}
			} catch (Exception e) {
				txtMensajes.setText(txtMensajes.getText() + "\n" + "ERROR: "
						+ e.getMessage() + "\n");
			}
		}

		protected void done() {
			try {
				btnDetener.setEnabled(false);
				btnIniciar.setEnabled(true);
			} catch (Exception e) {
			}
		}
	}
}
