package est.tfi;

import java.awt.Font;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.WindowAdapter;
import java.awt.event.WindowEvent;
import java.math.BigInteger;
import java.security.KeyFactory;
import java.security.MessageDigest;
import java.security.PublicKey;
import java.security.Security;
import java.security.Signature;
import java.security.spec.X509EncodedKeySpec;
import java.util.List;

import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JSeparator;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingWorker;
import javax.swing.border.EmptyBorder;

import org.bouncycastle.jce.provider.BouncyCastleProvider;
import org.bouncycastle.util.encoders.Base64;

public class SecureMultipartyDave extends JFrame {

	private JFrame _frame;
	private JTextField tfPuerto;
	private JButton btnIniciar;
	private JButton btnDetener;
	private JTextArea txtMensajes;
	private InnerTask task;
	private static final long serialVersionUID = 1L;
	private JLabel lblDestinoTrent;
	private JTextField tfDestinoTrent;
	private JLabel lblPuertoTrent;
	private JTextField tfPuertoTrent;

	/**
	 * Create the frame.
	 */
	public SecureMultipartyDave() {
		// referencia local
		_frame = this;
		// se agregará hook al cerrar
		setDefaultCloseOperation(JFrame.DO_NOTHING_ON_CLOSE);
		// tamaño fijo
		setBounds(300, 300, 523, 431);
		setResizable(false);
		// título
		setTitle("TFI - PCE - Timestamping Services como Bob");

		JPanel contentPane = new JPanel();
		contentPane.setBorder(new EmptyBorder(5, 5, 5, 5));
		setContentPane(contentPane);
		contentPane.setLayout(null);

		JLabel lblPuerto = new JLabel(
				"N\u00FAmero de conexi\u00F3n para esperar a Alice (puerto TCP)");
		lblPuerto.setBounds(10, 11, 300, 14);
		contentPane.add(lblPuerto);

		tfPuerto = new JTextField();
		tfPuerto.setText("22222");
		tfPuerto.setBounds(320, 6, 70, 23);
		contentPane.add(tfPuerto);
		tfPuerto.setColumns(10);

		JSeparator separator = new JSeparator();
		separator.setBounds(10, 90, 500, 14);
		contentPane.add(separator);

		btnIniciar = new JButton("Iniciar");
		btnIniciar.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent arg0) {
				btnIniciar.setEnabled(false);
				btnDetener.setEnabled(true);
				task = new InnerTask();
				task.execute();
			}
		});
		btnIniciar.setBounds(422, 6, 89, 25);
		contentPane.add(btnIniciar);

		btnDetener = new JButton("Detener");
		btnDetener.addActionListener(new ActionListener() {
			public void actionPerformed(ActionEvent e) {
				task.cancel(true);
			}
		});
		btnDetener.setEnabled(false);
		btnDetener.setBounds(422, 31, 89, 25);
		contentPane.add(btnDetener);

		JScrollPane scrollPane = new JScrollPane();
		scrollPane.setBounds(10, 100, 500, 290);
		contentPane.add(scrollPane);

		txtMensajes = new JTextArea();
		scrollPane.setViewportView(txtMensajes);
		txtMensajes.setEditable(false);
		txtMensajes.setFont(new Font("Monospaced", Font.PLAIN, 11));
		txtMensajes.setText("Esperando inicio...\n");
		
		lblDestinoTrent = new JLabel("Direcci\u00F3n de Trent (FQDN o direcci\u00F3n IP)");
		lblDestinoTrent.setBounds(10, 35, 233, 14);
		contentPane.add(lblDestinoTrent);
		
		tfDestinoTrent = new JTextField();
		tfDestinoTrent.setText("localhost");
		tfDestinoTrent.setColumns(10);
		tfDestinoTrent.setBounds(249, 31, 140, 23);
		contentPane.add(tfDestinoTrent);
		
		lblPuertoTrent = new JLabel("N\u00FAmero de conexi\u00F3n de Trent (puerto TCP)");
		lblPuertoTrent.setBounds(10, 60, 233, 14);
		contentPane.add(lblPuertoTrent);
		
		tfPuertoTrent = new JTextField();
		tfPuertoTrent.setText("33333");
		tfPuertoTrent.setColumns(10);
		tfPuertoTrent.setBounds(248, 56, 70, 23);
		contentPane.add(tfPuertoTrent);

		// hook al cerrar
		addWindowListener(new WindowAdapter() {
			public void windowClosing(WindowEvent e) {
				// ((JFrame)e.getSource()).dispose();
				_frame.dispose();
			}
		});

	}

	private class InnerTask extends SwingWorker<Void, String> {

		public InnerTask() {
		}

		protected Void doInBackground() throws Exception {
			try {
				// cargar el proveedor bouncy castle (BC)
				Security.addProvider(new BouncyCastleProvider());
				if (Security.getProvider("BC") == null) {
					throw new Exception(
							"Proveedor Bouncy Castle (BC) no disponible");
				}

				// esperar conexión (y envío) de parte de Alice
				publish("Esperando conexión de Alice...");
				TcpSimple tcp = new TcpSimple();
				tcp.escuchar(Integer.parseInt(tfPuerto.getText()));
				String documento = tcp.recibirString();
				String strFecha = tcp.recibirString();
				String strRecibo = tcp.recibirString();
				publish("Documento enviado por Alice: " + documento);
				publish("Fechado enviado por Alice: " + strFecha);
				publish("Recibo enviado por Alice: " + strRecibo);
				
				// sha-512 del documento
				MessageDigest md = MessageDigest.getInstance("SHA-512");
				byte[] hashBytes = md.digest(documento.getBytes("ISO-8859-1"));
				String hashStr = String.format("%0128x", new BigInteger(1,
						hashBytes));
				publish("SHA-512 del documento: " + hashStr);

				// hash de hash de alice + fecha
				String hashAFecharStr = hashStr + strFecha;
				MessageDigest md2 = MessageDigest.getInstance("SHA-512");
				byte[] hashBytes2 = md2.digest(hashAFecharStr.getBytes("ISO-8859-1"));
				String hashFechadoStr = String.format("%0128x", new BigInteger(1,
						hashBytes2));
				publish("SHA-512 del hash de Alice + fecha: " + hashFechadoStr);

				// conectar con Trent
				publish("Conectando con Trent para obtener su llave pública...");
				TcpSimple tcpTrent = new TcpSimple();
				tcpTrent.conectar(tfDestinoTrent.getText(),
						Integer.parseInt(tfPuertoTrent.getText()));
				tcpTrent.enviarString("LLAVE?");
				String llavePubTrentStr = tcpTrent.recibirString();
				byte[] llavePubTrentBytes = Base64.decode(llavePubTrentStr.getBytes("ISO-8859-1"));
				X509EncodedKeySpec spec = new X509EncodedKeySpec(llavePubTrentBytes);
	            KeyFactory factory = KeyFactory.getInstance("RSA", "BC");
	            PublicKey llavePubTrent = factory.generatePublic(spec);
	            
				// verificación de firma
			    Signature signature = Signature.getInstance("SHA256WithRSA", "BC");
			    signature.initVerify(llavePubTrent);
			    signature.update(hashFechadoStr.getBytes("ISO-8859-1"));
			    publish("Resultado de la comprobación de firma: " + (signature.verify(Base64.decode(strRecibo.getBytes("ISO-8859-1"))) ? "VÁLIDA." : "INVÁLIDA."));

				// terminar, cerrar conexiones
				tcp.desconectar();
				tcpTrent.desconectar();

				publish("PROTOCOLO TERMINADO.");

			} catch (InterruptedException ie) {
				publish("INTERRUMPIDO: " + ie.getMessage());
			} catch (Exception e) {
				publish("ERROR: " + e.getMessage());
			}
			return null;
		}

		protected void process(List<String> strs) {
			try {
				for (String str : strs) {
					if (str != null && !str.equals("")) {
						if (!str.startsWith("+++")) {
							txtMensajes.setText(txtMensajes.getText() + str
									+ "\n");
						} else {
							// mensaje especial
						}
					}
				}
			} catch (Exception e) {
				txtMensajes.setText(txtMensajes.getText() + "\n" + "ERROR: "
						+ e.getMessage() + "\n");
			}
		}

		protected void done() {
			try {
				btnDetener.setEnabled(false);
				btnIniciar.setEnabled(true);
			} catch (Exception e) {
			}
		}
	}
}
